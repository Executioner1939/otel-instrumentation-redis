name: Release

on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-*'
  pull_request:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Perform a dry run without publishing'
        required: false
        default: true
        type: boolean

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST_VERSION: stable
  # Cargo optimization settings
  CARGO_INCREMENTAL: 0
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_PROFILE_DEV_BUILD_OVERRIDE_CODEGEN_UNITS: 256
  CARGO_PROFILE_RELEASE_BUILD_OVERRIDE_CODEGEN_UNITS: 256
  CARGO_PROFILE_RELEASE_LTO: true
  CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
  CARGO_PROFILE_RELEASE_PANIC: abort
  CARGO_BUILD_JOBS: -1

jobs:
  # Linting job
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-targets: "true"
          cache-on-failure: "false"

      - name: Format code with rustfmt
        run: cargo fmt --all

      - name: Verify formatting
        run: |
          if [[ -n $(git diff --name-only) ]]; then
            echo "::error::Code formatting issues detected. Please run 'cargo fmt --all' before creating a release."
            echo "Files with formatting issues:"
            git diff --name-only
            exit 1
          fi

      - name: Run clippy
        run: cargo clippy --all-features --all-targets -- -D warnings

  # Check job
  check:
    name: Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - beta
          - nightly
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-targets: "true"
          cache-on-failure: "false"

      - name: Run cargo check
        run: cargo check --all-features --all-targets

  # Tests job
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y openssl libssl-dev pkg-config postgresql-client

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-targets: "true"
          cache-on-failure: "false"

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres
          do
            echo "Waiting for postgres..."
            sleep 2
          done

      - name: Setup TimescaleDB
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d test_db -c "CREATE EXTENSION IF NOT EXISTS timescaledb;"

      - name: Run tests
        run: |
          export CARGO_BUILD_JOBS=$(nproc)
          cargo test --all-features

      - name: Run doc tests
        run: cargo test --doc --all-features

  # Documentation generation job
  docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    needs: [lint, check, test]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-targets: "true"
          cache-on-failure: "false"

      - name: Generate documentation
        run: cargo doc --all-features --no-deps

      - name: Check documentation
        run: cargo doc --all-features --no-deps --document-private-items

      - name: Test documentation examples
        run: cargo test --doc --all-features

  # Compile job
  compile:
    name: Compile
    runs-on: ${{ matrix.os }}
    needs: [lint, check, test]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: ${{ matrix.target }}

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y openssl libssl-dev pkg-config

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-targets: "true"
          cache-on-failure: "false"

      - name: Build release binary
        run: |
          if [[ "${{ runner.os }}" == "Linux" || "${{ runner.os }}" == "macOS" ]]; then
            export CARGO_BUILD_JOBS=$(nproc 2>/dev/null || sysctl -n hw.ncpu)
          fi
          echo "Building with optimized settings..."
          cargo build --release --all-features --target ${{ matrix.target }}
        shell: bash

  # Publish to crates.io
  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: [lint, check, test, docs, compile]
    # Only run on non-prerelease tags and when not a dry run or PR
    if: "!contains(github.ref, '-') && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y openssl libssl-dev pkg-config

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-targets: "true"
          cache-on-failure: "false"

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Verify version matches tag
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          CARGO_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
          if [ "$TAG_VERSION" != "$CARGO_VERSION" ]; then
            echo "Error: Tag version ($TAG_VERSION) does not match Cargo.toml version ($CARGO_VERSION)"
            echo "Please update the version in Cargo.toml before creating a release tag"
            exit 1
          fi
          echo "âœ“ Version check passed: $TAG_VERSION"

      - name: Check crate can be packaged
        run: |
          echo "Checking if crate can be packaged..."
          cargo package --all-features --allow-dirty

      - name: Perform dry run publish
        run: |
          echo "Performing dry run to verify crate can be published..."
          cargo publish --all-features --dry-run

      - name: Publish to crates.io
        run: |
          echo "Publishing crate to crates.io..."
          cargo publish --all-features --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  # Create GitHub Release
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [lint, check, test, docs, compile]
    # Only create release for actual tags, not manual runs or PRs
    if: "github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')"
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install git-cliff
        uses: kenji-miyake/setup-git-cliff@v2

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Preparing release for version: $VERSION"

      - name: Generate changelog
        id: changelog
        run: |
          VERSION=${{ steps.version.outputs.version }}
          
          # Create release notes header
          echo "## diesel-timescaledb $VERSION" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### What's Changed" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          
          # Try to extract changes from CHANGELOG.md if it exists
          if [ -f CHANGELOG.md ]; then
            # Extract section for this version
            sed -n "/## $VERSION/,/## [0-9]/p" CHANGELOG.md | sed '1d;$d' >> RELEASE_NOTES.md || echo "- Release $VERSION of diesel-timescaledb" >> RELEASE_NOTES.md
          else
            # Generate changelog from git commits
            if command -v git-cliff &> /dev/null; then
              git-cliff --latest --strip all >> RELEASE_NOTES.md || echo "- Release $VERSION of diesel-timescaledb" >> RELEASE_NOTES.md
            else
              # Fallback to git log
              echo "### Commits" >> RELEASE_NOTES.md
              git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> RELEASE_NOTES.md || echo "- Release $VERSION of diesel-timescaledb" >> RELEASE_NOTES.md
            fi
          fi
          
          echo "" >> RELEASE_NOTES.md
          echo "### Installation" >> RELEASE_NOTES.md
          echo '```toml' >> RELEASE_NOTES.md
          echo "[dependencies]" >> RELEASE_NOTES.md
          echo "diesel-timescaledb = \"${VERSION#v}\"" >> RELEASE_NOTES.md
          echo '```' >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### Documentation" >> RELEASE_NOTES.md
          echo "- [API Documentation](https://docs.rs/diesel-timescaledb/${VERSION#v})" >> RELEASE_NOTES.md
          echo "- [README](https://github.com/${{ github.repository }}/blob/${VERSION}/README.md)" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$(git describe --tags --abbrev=0 HEAD^)...${VERSION}" >> RELEASE_NOTES.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: ${{ steps.version.outputs.version }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}